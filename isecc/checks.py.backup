#!/usr/bin/env python3.5

import argparse
import sys
import os
import time
import math
import numpy as np
from pyquaternion import Quaternion
from datetime import datetime
from . import transform
from . import starparse
from . import symops
from . import utils

I1Quaternions = symops.getSymOps()

def idealizeUserVector( user_vector, ROI ) :

	norm_factor = np.amax( np.absolute(user_vector) )

	I1_fivefold  = np.array( [0.000, 0.618, 1.000] ) * norm_factor
	I1_threefold = np.array( [0.382, 0.000, 1.000] ) * norm_factor
	I1_twofold   = np.array( [0.000, 0.000, 1.000] ) * norm_factor

	my_dtype = np.dtype( [	( 'vector', '<f4', (3,) ), 
				( '5f_distance', '<f4' ),
				( '3f_distance', '<f4' ),
				( '2f_distance', '<f4' )  ]  )

	expanded_user_vector = np.zeros( (60), dtype=my_dtype )

	for index, numpy_quat in enumerate(I1Quaternions, start=0 ):

		quat = Quaternion( numpy_quat )
		rotated_vector = np.around( quat.rotate( user_vector ), decimals=3 )

		expanded_user_vector[index]['vector'] = rotated_vector
		expanded_user_vector[index]['5f_distance'] = np.around( utils.assess3dDistance( rotated_vector, I1_fivefold  ), decimals=3 )
		expanded_user_vector[index]['3f_distance'] = np.around( utils.assess3dDistance( rotated_vector, I1_threefold ), decimals=3 )
		expanded_user_vector[index]['2f_distance'] = np.around( utils.assess3dDistance( rotated_vector, I1_twofold   ), decimals=3 )


	min_5f_distance = np.amin( expanded_user_vector['5f_distance'] )
	min_3f_distance = np.amin( expanded_user_vector['3f_distance'] )
	min_2f_distance = np.amin( expanded_user_vector['2f_distance'] )

	ideal_index = 999

	for index, item in enumerate(expanded_user_vector):

		if np.isclose(expanded_user_vector[index]['5f_distance'], min_5f_distance, atol=1) and np.isclose(expanded_user_vector[index]['3f_distance'], min_3f_distance, atol=1) and np.isclose(expanded_user_vector[index]['2f_distance'], min_2f_distance, atol=1):

			ideal_index = index


	if ideal_index != 999:
		idealized_vector = np.around( expanded_user_vector[ideal_index]['vector'], decimals=3 )
	else:
		print( 'Error idealizing user vector. Exiting now.' )
		sys.exit()


	if not np.allclose( idealized_vector, user_vector, atol=0.5 ):
		print( '\nUser vector', user_vector, "has been modified to be within desired asymmetric unit." )
		print( 'User vector is now', idealized_vector )

	return idealized_vector


def checkVector(user_vector, ROI, higher_order_sym):
	if ROI == 'fivefold' and higher_order_sym == 'I1' :
		vector_check = np.true_divide( user_vector[1], user_vector[2] )
		my_check = np.isclose( vector_check, 0.618, atol=0.1 )
		my_check2 = np.isclose( user_vector[0], 0, atol=0.1 )

	elif ROI == 'fivefold' and higher_order_sym == 'I2' :
		vector_check = np.true_divide( user_vector[0], user_vector[2] )
		my_check = np.isclose( vector_check, 0.618, atol=0.1 )
		my_check2 = np.isclose( user_vector[1], 0, atol=0.1 )

	elif ROI == 'threefold' and higher_order_sym == 'I1' :
		vector_check = np.true_divide( user_vector[0], user_vector[2] )
		my_check = np.isclose( vector_check, 0.382, atol=0.1 )
		my_check2 = np.isclose( user_vector[1], 0, atol=0.1 )

	elif ROI == 'threefold' and higher_order_sym == 'I2' :
		vector_check = np.true_divide( user_vector[1], user_vector[2] )
		my_check = np.isclose( vector_check, 0.382, atol=0.1 )
		my_check2 = np.isclose( user_vector[0], 0, atol=0.1 )

	elif ROI == 'twofold' and higher_order_sym == 'I1' :
		my_check = np.isclose( user_vector[0], 0, atol=0.1 )
		my_check2 = np.isclose( user_vector[1], 0, atol=0.1 )

	elif ROI == 'twofold' and higher_order_sym == 'I2' :
		my_check = np.isclose( user_vector[0], 0, atol=0.1 )
		my_check2 = np.isclose( user_vector[1], 0, atol=0.1 )

	elif ROI == 'fullexpand' or ROI == 'null' :
		my_check = True
		my_check2 = True

	if str(my_check) == 'False' or str(my_check2) == 'False':
		print( 'ERROR: Vector is not valid for roi', ROI, 'and symmetry', higher_order_sym )
		print( '       ', user_vector )
		print( '       Please provide a valid vector and try again.\n' )

		print( '  For I1 symmetry,' )
		print( '    Idealized Fivefold:   0.000, 0.618, 1.000')
		print( '    Idealized Threefold:  0.382, 0.000, 1.000')
		print( '    Idealized Twofold:    0.000, 0.000, 1.000\n')

		print( '  For I2 symmetry,' )
		print( '    Idealized Fivefold:   0.618, 0.000, 1.000')
		print( '    Idealized Threefold:  0.000, 0.382, 1.000')
		print( '    Idealized Twofold:    0.000, 0.000, 1.000\n')

		sys.exit()

	elif str(my_check) == 'True' or str(my_check2) == 'True':
		print( "\nVector is valid for roi", ROI, "and symmetry", higher_order_sym, "\n" )

	return

